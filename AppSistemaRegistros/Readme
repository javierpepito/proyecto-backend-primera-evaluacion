Caso 1: Sistema de Registro de Visitas para una Empresa
Contexto: Una empresa necesita llevar un control digital de las visitas que recibe diariamente. 
Requerimientos:
• Registrar nombre, RUT, motivo de visita y hora de entrada/salida.
• Mostrar listado de visitas del día.
• Utilizar estructuras de decisión para validar datos.

#
visitante: nombre/RUT/motivo/fecha/hora-entrada o salida (o la hora de entrada y salida)
Para mostrar los visitantes del dia se utilizara la fecha del sistema o libreria para fecha actual, con esta se filtrara en la BD.
Se validara: nombres, RUT, cantidad de caracteres del motivo, formato de hora y que sean consistentes.
(Preguntar si debe estar el CRUD completo de visitante)(Preguntar si la pagina va dirigida a que los visitantes se anoten o un admin)
#

Rubrica
1. Identifica correctamente variables y operaciones del lenguaje.

2. Utiliza estructuras de decisión y operadores de forma adecuada.

3. Integra paquetes externos en la solución.

4. Implementa una aplicación funcional en Django según requerimientos.

5. Estructura el código de forma clara y ordenada.

6. Comenta el código para facilitar su comprensión.

7. Valida correctamente los datos de entrada.

8. Utiliza correctamente el entorno de desarrollo y herramientas asociadas.

9. Cumple con los requerimientos funcionales del caso seleccionado.

convencion de commits:
-feat
-fix
-style
-refactor

python -m venv venv
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver